#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te avec OpenRouter GPT-5
"""

import os
import sys
from datetime import datetime

# Configuration de l'environnement
os.environ['PYTHONPATH'] = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from main import FLBNewsApp
from config_openrouter import get_analysis_config

def test_bulletin_with_openrouter():
    """Test de g√©n√©ration de bulletin avec OpenRouter"""
    print("üöÄ Test de g√©n√©ration de bulletin avec OpenRouter GPT-5")
    print("="*60)
    
    # V√©rifier la configuration
    config = get_analysis_config()
    
    if not config.get('enable_openrouter'):
        print("‚ùå OpenRouter n'est pas activ√©. V√©rifiez votre configuration.")
        return False
    
    print(f"‚úÖ OpenRouter activ√© avec le mod√®le: {config['openrouter_model']}")
    print(f"   Mode: {config['mode']}")
    print(f"   Articles max avec GPT-5: {config['max_openrouter_articles']}")
    
    try:
        # Cr√©er l'application
        print("\nüì± Initialisation de l'application FLB News...")
        app = FLBNewsApp()
        
        # G√©n√©rer un bulletin
        print("\nüì∞ G√©n√©ration du bulletin en cours...")
        print("   (Cela peut prendre quelques minutes avec l'analyse GPT-5)")
        
        bulletin_path = app.run_bulletin_generation()
        
        if bulletin_path:
            print(f"\n‚úÖ Bulletin g√©n√©r√© avec succ√®s!")
            print(f"   Fichier: {bulletin_path}")
            
            # Afficher un aper√ßu du contenu
            with open(bulletin_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'GPT-5' in content or 'openrouter' in content.lower():
                    print("   ‚úÖ Traces d'analyse OpenRouter d√©tect√©es dans le bulletin")
                
            return True
        else:
            print("\n‚ö†Ô∏è Aucun bulletin g√©n√©r√© (peut-√™tre aucune nouvelle pertinente)")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la g√©n√©ration: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_quick_analysis():
    """Test rapide de l'analyse avec un article exemple"""
    print("\n" + "="*60)
    print("‚ö° Test rapide d'analyse avec OpenRouter")
    
    from analyzer_engine import HybridAnalysisEngine
    from config_openrouter import get_analysis_config
    
    config = get_analysis_config()
    engine = HybridAnalysisEngine(config)
    
    # Article test tr√®s pertinent pour FLB
    test_article = {
        'title': "Metro et Sobeys annoncent une p√©nurie de produits frais au Qu√©bec",
        'summary': """Les grands distributeurs alimentaires du Qu√©bec font face √† des d√©fis 
        d'approvisionnement majeurs. La cha√Æne du froid est perturb√©e et les co√ªts de 
        transport ont augment√© de 25%. Les restaurateurs de la r√©gion de Qu√©bec peinent 
        √† s'approvisionner en produits frais locaux. FLB Solutions pourrait b√©n√©ficier 
        de cette situation en offrant des alternatives d'approvisionnement.""",
        'source': "La Presse Affaires",
        'url': "https://example.com/test"
    }
    
    print(f"\nüìÑ Article test: {test_article['title']}")
    
    try:
        print("\nüîÑ Analyse en cours avec GPT-5...")
        results = engine.analyze_batch([test_article])
        
        if results:
            article, analysis = results[0]
            print(f"\n‚úÖ R√©sultats de l'analyse:")
            print(f"   - Score de pertinence: {analysis.relevance_score:.2%}")
            print(f"   - Cat√©gorie: {analysis.category}")
            print(f"   - M√©thode d'analyse: {analysis.analysis_method}")
            print(f"   - Niveau de confiance: {analysis.confidence_level:.2%}")
            
            if analysis.business_impact:
                print(f"\n   üíº Impact business:")
                print(f"      {analysis.business_impact}")
            
            if analysis.strategic_insights:
                print(f"\n   üéØ Insights strat√©giques:")
                print(f"      {analysis.strategic_insights}")
            
            if analysis.recommended_actions:
                print(f"\n   ‚úÖ Actions recommand√©es:")
                for action in analysis.recommended_actions[:3]:
                    print(f"      - {action}")
            
            return True
        else:
            print("‚ùå Aucun r√©sultat d'analyse")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        return False

def main():
    """Fonction principale"""
    print("üîß TEST D'INT√âGRATION OPENROUTER GPT-5 AVEC FLB NEWS")
    print("="*60)
    
    # Test 1: Analyse rapide
    success_analysis = test_quick_analysis()
    
    # Test 2: G√©n√©ration de bulletin (optionnel car plus long)
    print("\n" + "="*60)
    response = input("\nüí≠ Voulez-vous tester la g√©n√©ration compl√®te du bulletin? (o/n): ")
    
    success_bulletin = False
    if response.lower() in ['o', 'oui', 'y', 'yes']:
        success_bulletin = test_bulletin_with_openrouter()
    else:
        print("   Test de g√©n√©ration ignor√©")
    
    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS:")
    print(f"   - Analyse rapide: {'‚úÖ R√©ussi' if success_analysis else '‚ùå √âchou√©'}")
    if response.lower() in ['o', 'oui', 'y', 'yes']:
        print(f"   - G√©n√©ration bulletin: {'‚úÖ R√©ussi' if success_bulletin else '‚ùå √âchou√©'}")
    
    if success_analysis:
        print("\nüéâ OpenRouter GPT-5 est correctement int√©gr√© √† FLB News!")
        print("\nüìù Pour utiliser OpenRouter dans vos bulletins:")
        print("   1. Assurez-vous que la cl√© API est dans .env")
        print("   2. Lancez: python main.py")
        print("   3. Le bulletin utilisera automatiquement GPT-5 pour l'analyse")

if __name__ == "__main__":
    main()