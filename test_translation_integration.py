#!/usr/bin/env python3
"""
Test de l'int√©gration de la traduction avec le syst√®me d'analyse avanc√©e
"""

import sys
import os
from datetime import datetime
sys.path.insert(0, 'src')

from scraper import FoodIndustryNewsScraper, NewsItem
from translator import NewsTranslator

def test_translation_with_analysis():
    print("\n" + "="*60)
    print("TEST: Traduction avec Analyse Avanc√©e")
    print("="*60)
    
    # Configuration minimale
    test_sources = {
        'Canadian Grocer': {
            'type': 'rss',
            'url': 'test',
            'language': 'en',
            'priority_multiplier': 1.5
        },
        'Western Grocer': {
            'type': 'rss',
            'url': 'test',
            'language': 'en',
            'priority_multiplier': 1.4
        },
        'Le Journal de Qu√©bec': {
            'type': 'rss',
            'url': 'test',
            'language': 'fr',
            'priority_multiplier': 1.3
        }
    }
    
    # Configuration d'analyse en mode √©conomique
    analysis_config = {
        'enable_bm25': True,
        'enable_ollama': False,
        'enable_openrouter': False,
        'mode': 'economique',
        'bm25_threshold': 0.3,
        'max_ollama_articles': 20,
        'max_openrouter_articles': 5
    }
    
    # Cr√©er le scraper avec analyseur
    scraper = FoodIndustryNewsScraper(
        test_sources,
        analysis_config=analysis_config
    )
    
    # Cr√©er des articles de test
    test_items = [
        NewsItem(
            title="Food Distribution Innovation Transforms Supply Chain",
            summary="Major Canadian food distributors are implementing new technologies to improve efficiency. The industry is seeing unprecedented changes in warehouse management and delivery systems.",
            source="Canadian Grocer",
            url="https://test1.com",
            published_date=datetime.now(),
            full_text="Full article content..."
        ),
        NewsItem(
            title="Western Canada Sees Growth in Local Food Movement",
            summary="Restaurants and retailers in Western Canada are increasingly sourcing from local producers. This trend is reshaping distribution networks.",
            source="Western Grocer",
            url="https://test2.com",
            published_date=datetime.now(),
            full_text="Full article content..."
        ),
        NewsItem(
            title="Qu√©bec lance un nouveau programme pour les distributeurs",
            summary="Le gouvernement du Qu√©bec annonce des mesures de soutien pour les distributeurs alimentaires r√©gionaux.",
            source="Le Journal de Qu√©bec",
            url="https://test3.com",
            published_date=datetime.now(),
            full_text="Contenu complet..."
        )
    ]
    
    print(f"\n{len(test_items)} articles de test cr√©√©s")
    print("\nAVANT traduction:")
    print("-" * 40)
    for item in test_items:
        print(f"üì∞ [{item.source}] {item.title[:50]}...")
    
    # Filtrer et traduire avec le nouveau syst√®me
    if scraper.analyzer:
        print("\n‚úÖ Utilisation du syst√®me d'analyse avanc√©e")
        filtered_items = scraper._advanced_filter(test_items)
    else:
        print("\n‚ö†Ô∏è Utilisation du syst√®me basique (analyseur non disponible)")
        filtered_items = scraper._filter_relevant_news(test_items)
    
    print(f"\n{len(filtered_items)} articles s√©lectionn√©s et traduits")
    print("\nAPR√àS traduction:")
    print("-" * 40)
    
    for item in filtered_items:
        print(f"\nüì∞ [{item.source}]")
        print(f"   Titre: {item.title[:80]}")
        print(f"   R√©sum√©: {item.summary[:100]}...")
        print(f"   Score: {getattr(item, 'relevance_score', 0):.1f}")
        
        # V√©rifier si la traduction a eu lieu pour les sources anglaises
        if item.source in ['Canadian Grocer', 'Western Grocer']:
            # D√©tecter des mots fran√ßais dans le titre
            french_words = ['de', 'le', 'la', 'les', 'dans', 'pour', 'avec', 'et']
            has_french = any(word in item.title.lower().split() for word in french_words)
            
            if has_french or 'distribution' in item.title.lower():
                print("   ‚úÖ Traduction effectu√©e")
            else:
                print("   ‚ö†Ô∏è Traduction peut-√™tre incompl√®te")

def test_translator_directly():
    print("\n" + "="*60)
    print("TEST: Traducteur Direct")
    print("="*60)
    
    translator = NewsTranslator()
    
    test_texts = [
        ("Food distribution companies face new challenges", "Canadian Grocer"),
        ("Supply chain innovation transforms the industry", "Western Grocer"),
        ("Les distributeurs qu√©b√©cois innovent", "Le Journal de Qu√©bec")
    ]
    
    for text, source in test_texts:
        translated = translator.translate_if_needed(text, source)
        print(f"\n[{source}]")
        print(f"Original: {text}")
        print(f"Traduit:  {translated}")
        if text != translated:
            print("‚úÖ Traduction appliqu√©e")
        else:
            print("‚ÑπÔ∏è Pas de traduction n√©cessaire")

def main():
    print("\n" + "#"*60)
    print("# TEST D'INT√âGRATION TRADUCTION + ANALYSE")
    print("#"*60)
    
    # Test direct du traducteur
    test_translator_directly()
    
    # Test avec le syst√®me complet
    test_translation_with_analysis()
    
    print("\n" + "#"*60)
    print("# TESTS TERMIN√âS")
    print("#"*60)
    
    print("\nüìä R√©sum√©:")
    print("- La traduction est maintenant int√©gr√©e dans _advanced_filter()")
    print("- Les articles des sources anglaises sont traduits APR√àS s√©lection")
    print("- Seuls les 5 articles finaux sont traduits (√©conomie de cr√©dits DeepL)")
    
    print("\nüí° Notes importantes:")
    print("1. La traduction se fait APR√àS l'analyse de pertinence")
    print("2. Seuls les articles s√©lectionn√©s sont traduits")
    print("3. Titre, r√©sum√© ET explication de pertinence sont traduits")

if __name__ == "__main__":
    main()