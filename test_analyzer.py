#!/usr/bin/env python3
"""
Test du nouveau syst√®me d'analyse hybride
"""

import sys
import os
sys.path.insert(0, 'src')

from analyzer_engine import HybridAnalysisEngine, BM25Analyzer
from datetime import datetime

def test_bm25_analyzer():
    """Test de l'analyseur BM25"""
    print("\n" + "="*60)
    print("TEST: BM25 Analyzer")
    print("="*60)
    
    # Configuration avec mots-cl√©s FLB
    keywords = {
        'distributeur alimentaire': 10,
        'qu√©bec': 8,
        'supply chain': 7,
        'restauration': 6,
        'local': 5
    }
    
    analyzer = BM25Analyzer(keywords)
    
    # Documents de test
    documents = [
        "Les distributeurs alimentaires du Qu√©bec font face √† de nouveaux d√©fis dans la cha√Æne d'approvisionnement.",
        "Un nouveau restaurant ouvre ses portes √† Montr√©al avec un concept innovant.",
        "La m√©t√©o sera ensoleill√©e demain avec des temp√©ratures agr√©ables.",
        "Supply chain innovation transforms food distribution in Quebec restaurants.",
        "Les produits locaux gagnent en popularit√© chez les grossistes alimentaires."
    ]
    
    # Construire l'index
    analyzer.build_index(documents)
    
    # Tester le scoring
    print("\nScores de pertinence:")
    for i, doc in enumerate(documents):
        score = analyzer.score_document(doc)
        print(f"{i+1}. Score: {score:.3f} - {doc[:60]}...")
    
    print("\n‚úÖ BM25 Analyzer fonctionne correctement")

def test_hybrid_engine():
    """Test du moteur hybride complet"""
    print("\n" + "="*60)
    print("TEST: Hybrid Analysis Engine")
    print("="*60)
    
    # Configuration en mode √©conomique (BM25 seulement)
    config = {
        'enable_bm25': True,
        'enable_ollama': False,  # D√©sactiv√© pour le test
        'enable_openrouter': False,  # D√©sactiv√© pour le test
        'mode': 'economique',
        'bm25_threshold': 0.3,
        'max_ollama_articles': 20,
        'max_openrouter_articles': 5,
        'keywords': {
            'distributeur alimentaire': 10,
            'grossiste': 8,
            'qu√©bec': 9,
            'supply chain': 7,
            'restauration': 8,
            'local': 6,
            'innovation': 5,
            'tendance': 4
        }
    }
    
    engine = HybridAnalysisEngine(config)
    
    # Articles de test simulant des nouvelles r√©elles
    test_articles = [
        {
            'title': "Les grossistes alimentaires du Qu√©bec innovent dans la distribution",
            'summary': "Face aux d√©fis de la cha√Æne d'approvisionnement, les distributeurs alimentaires qu√©b√©cois adoptent de nouvelles technologies pour optimiser leurs op√©rations. Cette transformation touche particuli√®rement le secteur de la restauration.",
            'source': "La Presse",
            'url': "https://example.com/1",
            'published_date': datetime.now()
        },
        {
            'title': "Supply Chain Disruptions Impact Food Distribution",
            'summary': "Major food distributors are facing unprecedented challenges in their supply chain operations. Innovation in logistics and local sourcing are becoming critical for success.",
            'source': "Canadian Grocer",
            'url': "https://example.com/2"
        },
        {
            'title': "Nouvelles tendances en restauration",
            'summary': "Les restaurants adoptent de nouvelles approches pour s'approvisionner localement. Les distributeurs alimentaires jouent un r√¥le cl√© dans cette transition.",
            'source': "Journal de Qu√©bec",
            'url': "https://example.com/3"
        },
        {
            'title': "M√©t√©o favorable pour les r√©coltes",
            'summary': "Les conditions m√©t√©orologiques sont excellentes cette semaine. Les agriculteurs sont optimistes.",
            'source': "M√©t√©o M√©dia",
            'url': "https://example.com/4"
        },
        {
            'title': "Innovation technologique dans le secteur bancaire",
            'summary': "Les banques canadiennes investissent massivement dans l'intelligence artificielle.",
            'source': "Les Affaires",
            'url': "https://example.com/5"
        }
    ]
    
    print(f"\nAnalyse de {len(test_articles)} articles...")
    
    # Analyser le lot
    results = engine.analyze_batch(test_articles)
    
    print(f"\n{len(results)} articles analys√©s et scor√©s")
    print("\nR√©sultats d'analyse:")
    print("-" * 60)
    
    for article, analysis in results:
        print(f"\nüì∞ {article['title'][:50]}...")
        print(f"   Source: {article['source']}")
        print(f"   Score: {analysis.relevance_score:.2%}")
        print(f"   Cat√©gorie: {analysis.category}")
        print(f"   M√©thode: {analysis.analysis_method}")
        print(f"   Impact: {analysis.business_impact}")
        if analysis.confidence_level:
            print(f"   Confiance: {analysis.confidence_level:.2%}")
    
    # Afficher le top 3
    print("\n" + "="*60)
    print("TOP 3 ARTICLES LES PLUS PERTINENTS:")
    print("="*60)
    
    top_results = sorted(results, key=lambda x: x[1].relevance_score, reverse=True)[:3]
    
    for i, (article, analysis) in enumerate(top_results, 1):
        print(f"\n{i}. {article['title']}")
        print(f"   Pertinence FLB: {analysis.relevance_score:.0%}")
        print(f"   Cat√©gorie: {analysis.category}")
    
    print("\n‚úÖ Hybrid Engine fonctionne correctement")

def test_integration():
    """Test d'int√©gration avec le scraper"""
    print("\n" + "="*60)
    print("TEST: Int√©gration avec le Scraper")
    print("="*60)
    
    try:
        from scraper import FoodIndustryNewsScraper, NewsItem
        
        # Configuration minimale pour test
        test_sources = {
            'Test Source': {
                'type': 'rss',
                'url': 'https://example.com/feed',
                'priority_multiplier': 1.5
            }
        }
        
        analysis_config = {
            'enable_bm25': True,
            'enable_ollama': False,
            'enable_openrouter': False,
            'mode': 'economique'
        }
        
        scraper = FoodIndustryNewsScraper(
            test_sources, 
            analysis_config=analysis_config
        )
        
        if scraper.analyzer:
            print("‚úÖ Analyseur correctement int√©gr√© dans le scraper")
            print(f"   Mode: {scraper.analyzer.config['mode']}")
            print(f"   BM25 activ√©: {scraper.analyzer.config['enable_bm25']}")
        else:
            print("‚ö†Ô∏è Analyseur non initialis√© (normal si d√©pendances manquantes)")
        
    except Exception as e:
        print(f"‚ùå Erreur d'int√©gration: {e}")

def main():
    print("\n" + "#"*60)
    print("# TEST DU SYST√àME D'ANALYSE AVANC√âE FLB NEWS")
    print("#"*60)
    
    # V√©rifier les d√©pendances
    print("\nV√©rification des d√©pendances:")
    print("-" * 40)
    
    try:
        from rank_bm25 import BM25Okapi
        print("‚úÖ rank-bm25 install√©")
    except ImportError:
        print("‚ùå rank-bm25 non install√© (pip install rank-bm25)")
    
    try:
        import ollama
        print("‚úÖ ollama install√©")
    except ImportError:
        print("‚ö†Ô∏è ollama non install√© (optionnel)")
    
    try:
        import openai
        print("‚úÖ openai install√©")
    except ImportError:
        print("‚ö†Ô∏è openai non install√© (optionnel)")
    
    # Lancer les tests
    test_bm25_analyzer()
    test_hybrid_engine()
    test_integration()
    
    print("\n" + "#"*60)
    print("# TESTS TERMIN√âS AVEC SUCC√àS")
    print("#"*60)
    print("\nüìä R√©sum√©:")
    print("- BM25 Analyzer: Op√©rationnel")
    print("- Hybrid Engine: Op√©rationnel en mode √©conomique")
    print("- Int√©gration: Pr√™te")
    print("\nüí° Pour activer les fonctionnalit√©s avanc√©es:")
    print("1. Installer Ollama: curl -fsSL https://ollama.com/install.sh | sh")
    print("2. T√©l√©charger un mod√®le: ollama pull phi2")
    print("3. Configurer OpenRouter: export OPENROUTER_API_KEY=votre_cl√©")
    print("4. Modifier ANALYSIS_CONFIG dans config.py")

if __name__ == "__main__":
    main()